package com.pyae.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import org.h2.engine.GeneratedKeysMode;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

@TestMethodOrder(value = OrderAnnotation.class)
public class Test {

	private static final String URL = "jdbc:h2:mem:TestDB";
	private static final String USERNAME = "username";
	private static final String PASS = "password";
	static Connection connection;
	
	@BeforeAll
	static void beforeAll() throws SQLException {
		
		connection = DriverManager.getConnection(URL,USERNAME,PASS);
		
		var AccountTableDDL = """
				create table ACCOUNT(id int GENERATED BY DEFAULT AS IDENTITY,
				name varchar(40) not null,
				phone varchar(40) not null); 
				""";
		
		try(var statement = connection.createStatement()){
			statement.execute(AccountTableDDL);
		}
		
		
	}
	@ParameterizedTest
	@Order(1)
	@CsvSource({
		"Thiha,0911112222,1",
		"Sanda,097772222,2",
		"Pyae,0988881111,3"
	})
	void insertTest(String name, String phone, int expectedID) {
		
		var sql = """
				insert into ACCOUNT(name,phone) values(?,?)
				""";
		try(var stmt = connection.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS)){
			
			stmt.setString(1, name);
			stmt.setString(2, phone);
			
			stmt.executeUpdate();
			
			var rs = stmt.getGeneratedKeys();
			if(rs.next()) {
				var pk = rs.getInt(1);
				assertEquals(expectedID,pk );
			}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@org.junit.jupiter.api.Test
	@Order(2)
	void selectTest() {
		var sql= "select count(*) from ACCOUNT;";
		try(var stmt = connection.prepareStatement(sql)){
			var rs = stmt.executeQuery();
			if(rs.next()) {
				var total = rs.getDouble(1);
				assertEquals(3, total);
			}
			
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@ParameterizedTest
	@Order(3)
	@CsvSource({
		"Thiha,0911112222,1",
		"Sanda,097772222,2",
		"Pyae,0988881111,3"
	})
	void findByIdTest(String name, String phone, int id) {
		var sql = "select * from account where id =?";
		try(var stmt = connection.prepareStatement(sql)){
			stmt.setInt(1, id );
			
			var rs = stmt.executeQuery();
			
			if(rs.next()) {
				var nameColumn = rs.getString("name");
				var phoneColumn = rs.getString("phone");
				assertEquals(name, nameColumn);
				assertEquals(phone, phoneColumn);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@AfterAll
	static void afterAll() throws SQLException {
		if(null != connection) {
			connection.close();
		}
	}
}
